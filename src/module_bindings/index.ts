// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CreateRoom } from "./create_room_reducer.ts";
export { CreateRoom };
import { DeleteRoom } from "./delete_room_reducer.ts";
export { DeleteRoom };
import { DropPiece } from "./drop_piece_reducer.ts";
export { DropPiece };
import { Hello } from "./hello_reducer.ts";
export { Hello };
import { HelloWithText } from "./hello_with_text_reducer.ts";
export { HelloWithText };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { JoinOrCreateGame } from "./join_or_create_game_reducer.ts";
export { JoinOrCreateGame };
import { JoinToRoom } from "./join_to_room_reducer.ts";
export { JoinToRoom };
import { LeaveRoom } from "./leave_room_reducer.ts";
export { LeaveRoom };
import { RestartGame } from "./restart_game_reducer.ts";
export { RestartGame };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { GameTableHandle } from "./game_table.ts";
export { GameTableHandle };
import { JoinGameTableHandle } from "./join_game_table.ts";
export { JoinGameTableHandle };
import { JoinRoomTableHandle } from "./join_room_table.ts";
export { JoinRoomTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { RoomTableHandle } from "./room_table.ts";
export { RoomTableHandle };

// Import and reexport all types
import { Coord } from "./coord_type.ts";
export { Coord };
import { Game } from "./game_type.ts";
export { Game };
import { JoinGame } from "./join_game_type.ts";
export { JoinGame };
import { JoinRoom } from "./join_room_type.ts";
export { JoinRoom };
import { Message } from "./message_type.ts";
export { Message };
import { Player } from "./player_type.ts";
export { Player };
import { Room } from "./room_type.ts";
export { Room };
import { Winner } from "./winner_type.ts";
export { Winner };

const REMOTE_MODULE = {
  tables: {
    game: {
      tableName: "game",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "roomId",
    },
    join_game: {
      tableName: "join_game",
      rowType: JoinGame.getTypeScriptAlgebraicType(),
      primaryKey: "joinerId",
    },
    join_room: {
      tableName: "join_room",
      rowType: JoinRoom.getTypeScriptAlgebraicType(),
      primaryKey: "joinerId",
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    room: {
      tableName: "room",
      rowType: Room.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    create_room: {
      reducerName: "create_room",
      argsType: CreateRoom.getTypeScriptAlgebraicType(),
    },
    delete_room: {
      reducerName: "delete_room",
      argsType: DeleteRoom.getTypeScriptAlgebraicType(),
    },
    drop_piece: {
      reducerName: "drop_piece",
      argsType: DropPiece.getTypeScriptAlgebraicType(),
    },
    hello: {
      reducerName: "hello",
      argsType: Hello.getTypeScriptAlgebraicType(),
    },
    hello_with_text: {
      reducerName: "hello_with_text",
      argsType: HelloWithText.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    join_or_create_game: {
      reducerName: "join_or_create_game",
      argsType: JoinOrCreateGame.getTypeScriptAlgebraicType(),
    },
    join_to_room: {
      reducerName: "join_to_room",
      argsType: JoinToRoom.getTypeScriptAlgebraicType(),
    },
    leave_room: {
      reducerName: "leave_room",
      argsType: LeaveRoom.getTypeScriptAlgebraicType(),
    },
    restart_game: {
      reducerName: "restart_game",
      argsType: RestartGame.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreateRoom", args: CreateRoom }
| { name: "DeleteRoom", args: DeleteRoom }
| { name: "DropPiece", args: DropPiece }
| { name: "Hello", args: Hello }
| { name: "HelloWithText", args: HelloWithText }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "JoinOrCreateGame", args: JoinOrCreateGame }
| { name: "JoinToRoom", args: JoinToRoom }
| { name: "LeaveRoom", args: LeaveRoom }
| { name: "RestartGame", args: RestartGame }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createRoom(title: string) {
    const __args = { title };
    let __writer = new BinaryWriter(1024);
    CreateRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_room", __argsBuffer, this.setCallReducerFlags.createRoomFlags);
  }

  onCreateRoom(callback: (ctx: ReducerEventContext, title: string) => void) {
    this.connection.onReducer("create_room", callback);
  }

  removeOnCreateRoom(callback: (ctx: ReducerEventContext, title: string) => void) {
    this.connection.offReducer("create_room", callback);
  }

  deleteRoom(roomId: number) {
    const __args = { roomId };
    let __writer = new BinaryWriter(1024);
    DeleteRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_room", __argsBuffer, this.setCallReducerFlags.deleteRoomFlags);
  }

  onDeleteRoom(callback: (ctx: ReducerEventContext, roomId: number) => void) {
    this.connection.onReducer("delete_room", callback);
  }

  removeOnDeleteRoom(callback: (ctx: ReducerEventContext, roomId: number) => void) {
    this.connection.offReducer("delete_room", callback);
  }

  dropPiece(column: number) {
    const __args = { column };
    let __writer = new BinaryWriter(1024);
    DropPiece.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_piece", __argsBuffer, this.setCallReducerFlags.dropPieceFlags);
  }

  onDropPiece(callback: (ctx: ReducerEventContext, column: number) => void) {
    this.connection.onReducer("drop_piece", callback);
  }

  removeOnDropPiece(callback: (ctx: ReducerEventContext, column: number) => void) {
    this.connection.offReducer("drop_piece", callback);
  }

  hello() {
    this.connection.callReducer("hello", new Uint8Array(0), this.setCallReducerFlags.helloFlags);
  }

  onHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("hello", callback);
  }

  removeOnHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("hello", callback);
  }

  helloWithText(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    HelloWithText.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("hello_with_text", __argsBuffer, this.setCallReducerFlags.helloWithTextFlags);
  }

  onHelloWithText(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("hello_with_text", callback);
  }

  removeOnHelloWithText(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("hello_with_text", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  joinOrCreateGame() {
    this.connection.callReducer("join_or_create_game", new Uint8Array(0), this.setCallReducerFlags.joinOrCreateGameFlags);
  }

  onJoinOrCreateGame(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("join_or_create_game", callback);
  }

  removeOnJoinOrCreateGame(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("join_or_create_game", callback);
  }

  joinToRoom(roomId: number) {
    const __args = { roomId };
    let __writer = new BinaryWriter(1024);
    JoinToRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_to_room", __argsBuffer, this.setCallReducerFlags.joinToRoomFlags);
  }

  onJoinToRoom(callback: (ctx: ReducerEventContext, roomId: number) => void) {
    this.connection.onReducer("join_to_room", callback);
  }

  removeOnJoinToRoom(callback: (ctx: ReducerEventContext, roomId: number) => void) {
    this.connection.offReducer("join_to_room", callback);
  }

  leaveRoom() {
    this.connection.callReducer("leave_room", new Uint8Array(0), this.setCallReducerFlags.leaveRoomFlags);
  }

  onLeaveRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("leave_room", callback);
  }

  removeOnLeaveRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("leave_room", callback);
  }

  restartGame() {
    this.connection.callReducer("restart_game", new Uint8Array(0), this.setCallReducerFlags.restartGameFlags);
  }

  onRestartGame(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("restart_game", callback);
  }

  removeOnRestartGame(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("restart_game", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  createRoomFlags: CallReducerFlags = 'FullUpdate';
  createRoom(flags: CallReducerFlags) {
    this.createRoomFlags = flags;
  }

  deleteRoomFlags: CallReducerFlags = 'FullUpdate';
  deleteRoom(flags: CallReducerFlags) {
    this.deleteRoomFlags = flags;
  }

  dropPieceFlags: CallReducerFlags = 'FullUpdate';
  dropPiece(flags: CallReducerFlags) {
    this.dropPieceFlags = flags;
  }

  helloFlags: CallReducerFlags = 'FullUpdate';
  hello(flags: CallReducerFlags) {
    this.helloFlags = flags;
  }

  helloWithTextFlags: CallReducerFlags = 'FullUpdate';
  helloWithText(flags: CallReducerFlags) {
    this.helloWithTextFlags = flags;
  }

  joinOrCreateGameFlags: CallReducerFlags = 'FullUpdate';
  joinOrCreateGame(flags: CallReducerFlags) {
    this.joinOrCreateGameFlags = flags;
  }

  joinToRoomFlags: CallReducerFlags = 'FullUpdate';
  joinToRoom(flags: CallReducerFlags) {
    this.joinToRoomFlags = flags;
  }

  leaveRoomFlags: CallReducerFlags = 'FullUpdate';
  leaveRoom(flags: CallReducerFlags) {
    this.leaveRoomFlags = flags;
  }

  restartGameFlags: CallReducerFlags = 'FullUpdate';
  restartGame(flags: CallReducerFlags) {
    this.restartGameFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get game(): GameTableHandle {
    return new GameTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.game));
  }

  get joinGame(): JoinGameTableHandle {
    return new JoinGameTableHandle(this.connection.clientCache.getOrCreateTable<JoinGame>(REMOTE_MODULE.tables.join_game));
  }

  get joinRoom(): JoinRoomTableHandle {
    return new JoinRoomTableHandle(this.connection.clientCache.getOrCreateTable<JoinRoom>(REMOTE_MODULE.tables.join_room));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get room(): RoomTableHandle {
    return new RoomTableHandle(this.connection.clientCache.getOrCreateTable<Room>(REMOTE_MODULE.tables.room));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
