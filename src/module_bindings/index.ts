// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CreateRoom } from "./create_room_reducer.ts";
export { CreateRoom };
import { DeleteAllGlobalMessages } from "./delete_all_global_messages_reducer.ts";
export { DeleteAllGlobalMessages };
import { Hello } from "./hello_reducer.ts";
export { Hello };
import { HelloWithText } from "./hello_with_text_reducer.ts";
export { HelloWithText };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { JoinToRoom } from "./join_to_room_reducer.ts";
export { JoinToRoom };
import { LeaveRoom } from "./leave_room_reducer.ts";
export { LeaveRoom };
import { SendGlobalMessage } from "./send_global_message_reducer.ts";
export { SendGlobalMessage };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { DeleteGlobalMessageScheduleTableHandle } from "./delete_global_message_schedule_table.ts";
export { DeleteGlobalMessageScheduleTableHandle };
import { GameTableHandle } from "./game_table.ts";
export { GameTableHandle };
import { GlobalMessageTableHandle } from "./global_message_table.ts";
export { GlobalMessageTableHandle };
import { JoinRoomTableHandle } from "./join_room_table.ts";
export { JoinRoomTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { RoomTableHandle } from "./room_table.ts";
export { RoomTableHandle };

// Import and reexport all types
import { DeleteGlobalMessageSchedule } from "./delete_global_message_schedule_type.ts";
export { DeleteGlobalMessageSchedule };
import { Game } from "./game_type.ts";
export { Game };
import { GlobalMessage } from "./global_message_type.ts";
export { GlobalMessage };
import { JoinRoom } from "./join_room_type.ts";
export { JoinRoom };
import { Message } from "./message_type.ts";
export { Message };
import { Player } from "./player_type.ts";
export { Player };
import { Room } from "./room_type.ts";
export { Room };

const REMOTE_MODULE = {
  tables: {
    delete_global_message_schedule: {
      tableName: "delete_global_message_schedule",
      rowType: DeleteGlobalMessageSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    game: {
      tableName: "game",
      rowType: Game.getTypeScriptAlgebraicType(),
    },
    global_message: {
      tableName: "global_message",
      rowType: GlobalMessage.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    join_room: {
      tableName: "join_room",
      rowType: JoinRoom.getTypeScriptAlgebraicType(),
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    room: {
      tableName: "room",
      rowType: Room.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    create_room: {
      reducerName: "create_room",
      argsType: CreateRoom.getTypeScriptAlgebraicType(),
    },
    delete_all_global_messages: {
      reducerName: "delete_all_global_messages",
      argsType: DeleteAllGlobalMessages.getTypeScriptAlgebraicType(),
    },
    hello: {
      reducerName: "hello",
      argsType: Hello.getTypeScriptAlgebraicType(),
    },
    hello_with_text: {
      reducerName: "hello_with_text",
      argsType: HelloWithText.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    join_to_room: {
      reducerName: "join_to_room",
      argsType: JoinToRoom.getTypeScriptAlgebraicType(),
    },
    leave_room: {
      reducerName: "leave_room",
      argsType: LeaveRoom.getTypeScriptAlgebraicType(),
    },
    send_global_message: {
      reducerName: "send_global_message",
      argsType: SendGlobalMessage.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreateRoom", args: CreateRoom }
| { name: "DeleteAllGlobalMessages", args: DeleteAllGlobalMessages }
| { name: "Hello", args: Hello }
| { name: "HelloWithText", args: HelloWithText }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "JoinToRoom", args: JoinToRoom }
| { name: "LeaveRoom", args: LeaveRoom }
| { name: "SendGlobalMessage", args: SendGlobalMessage }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createRoom() {
    this.connection.callReducer("create_room", new Uint8Array(0), this.setCallReducerFlags.createRoomFlags);
  }

  onCreateRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("create_room", callback);
  }

  removeOnCreateRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("create_room", callback);
  }

  deleteAllGlobalMessages(arg: DeleteGlobalMessageSchedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    DeleteAllGlobalMessages.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_all_global_messages", __argsBuffer, this.setCallReducerFlags.deleteAllGlobalMessagesFlags);
  }

  onDeleteAllGlobalMessages(callback: (ctx: ReducerEventContext, arg: DeleteGlobalMessageSchedule) => void) {
    this.connection.onReducer("delete_all_global_messages", callback);
  }

  removeOnDeleteAllGlobalMessages(callback: (ctx: ReducerEventContext, arg: DeleteGlobalMessageSchedule) => void) {
    this.connection.offReducer("delete_all_global_messages", callback);
  }

  hello() {
    this.connection.callReducer("hello", new Uint8Array(0), this.setCallReducerFlags.helloFlags);
  }

  onHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("hello", callback);
  }

  removeOnHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("hello", callback);
  }

  helloWithText(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    HelloWithText.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("hello_with_text", __argsBuffer, this.setCallReducerFlags.helloWithTextFlags);
  }

  onHelloWithText(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("hello_with_text", callback);
  }

  removeOnHelloWithText(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("hello_with_text", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  joinToRoom(roomId: bigint) {
    const __args = { roomId };
    let __writer = new BinaryWriter(1024);
    JoinToRoom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_to_room", __argsBuffer, this.setCallReducerFlags.joinToRoomFlags);
  }

  onJoinToRoom(callback: (ctx: ReducerEventContext, roomId: bigint) => void) {
    this.connection.onReducer("join_to_room", callback);
  }

  removeOnJoinToRoom(callback: (ctx: ReducerEventContext, roomId: bigint) => void) {
    this.connection.offReducer("join_to_room", callback);
  }

  leaveRoom() {
    this.connection.callReducer("leave_room", new Uint8Array(0), this.setCallReducerFlags.leaveRoomFlags);
  }

  onLeaveRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("leave_room", callback);
  }

  removeOnLeaveRoom(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("leave_room", callback);
  }

  sendGlobalMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendGlobalMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_global_message", __argsBuffer, this.setCallReducerFlags.sendGlobalMessageFlags);
  }

  onSendGlobalMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_global_message", callback);
  }

  removeOnSendGlobalMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_global_message", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  createRoomFlags: CallReducerFlags = 'FullUpdate';
  createRoom(flags: CallReducerFlags) {
    this.createRoomFlags = flags;
  }

  deleteAllGlobalMessagesFlags: CallReducerFlags = 'FullUpdate';
  deleteAllGlobalMessages(flags: CallReducerFlags) {
    this.deleteAllGlobalMessagesFlags = flags;
  }

  helloFlags: CallReducerFlags = 'FullUpdate';
  hello(flags: CallReducerFlags) {
    this.helloFlags = flags;
  }

  helloWithTextFlags: CallReducerFlags = 'FullUpdate';
  helloWithText(flags: CallReducerFlags) {
    this.helloWithTextFlags = flags;
  }

  joinToRoomFlags: CallReducerFlags = 'FullUpdate';
  joinToRoom(flags: CallReducerFlags) {
    this.joinToRoomFlags = flags;
  }

  leaveRoomFlags: CallReducerFlags = 'FullUpdate';
  leaveRoom(flags: CallReducerFlags) {
    this.leaveRoomFlags = flags;
  }

  sendGlobalMessageFlags: CallReducerFlags = 'FullUpdate';
  sendGlobalMessage(flags: CallReducerFlags) {
    this.sendGlobalMessageFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get deleteGlobalMessageSchedule(): DeleteGlobalMessageScheduleTableHandle {
    return new DeleteGlobalMessageScheduleTableHandle(this.connection.clientCache.getOrCreateTable<DeleteGlobalMessageSchedule>(REMOTE_MODULE.tables.delete_global_message_schedule));
  }

  get game(): GameTableHandle {
    return new GameTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.game));
  }

  get globalMessage(): GlobalMessageTableHandle {
    return new GlobalMessageTableHandle(this.connection.clientCache.getOrCreateTable<GlobalMessage>(REMOTE_MODULE.tables.global_message));
  }

  get joinRoom(): JoinRoomTableHandle {
    return new JoinRoomTableHandle(this.connection.clientCache.getOrCreateTable<JoinRoom>(REMOTE_MODULE.tables.join_room));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get room(): RoomTableHandle {
    return new RoomTableHandle(this.connection.clientCache.getOrCreateTable<Room>(REMOTE_MODULE.tables.room));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
